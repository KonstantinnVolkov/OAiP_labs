unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Grids, Vcl.ExtCtrls, Vcl.StdCtrls;

type
  TArray = array of integer;

  TForm1 = class(TForm)
    StaticText1: TStaticText;
    StaticText13: TStaticText;
    StaticText14: TStaticText;
    StaticText17: TStaticText;
    StaticText20: TStaticText;
    comp10_bubble_U: TStaticText;
    trans10_bubble_U: TStaticText;
    StaticText2: TStaticText;
    comp10_bubble_S: TStaticText;
    trans10_bubble_S: TStaticText;
    StaticText5: TStaticText;
    comp10_bubble_R: TStaticText;
    trans10_bubble_R: TStaticText;
    StaticText8: TStaticText;
    StaticText9: TStaticText;
    StaticText10: TStaticText;
    comp10_quick_U: TStaticText;
    trans10_quick_U: TStaticText;
    comp10_quick_S: TStaticText;
    trans10_quick_S: TStaticText;
    comp10_quick_R: TStaticText;
    trans10_quick_R: TStaticText;
    StaticText21: TStaticText;
    StaticText22: TStaticText;
    StaticText23: TStaticText;
    comp10_straight_U: TStaticText;
    trans10_straight_U: TStaticText;
    comp10_straight_S: TStaticText;
    trans10_straight_S: TStaticText;
    comp10_straight_R: TStaticText;
    trans10_straight_R: TStaticText;
    StaticText30: TStaticText;
    comp100_bubble_U: TStaticText;
    trans100_bubble_U: TStaticText;
    StaticText33: TStaticText;
    comp100_bubble_S: TStaticText;
    trans100_bubble_S: TStaticText;
    StaticText36: TStaticText;
    comp100_bubble_R: TStaticText;
    trans100_bubble_R: TStaticText;
    comp100_quick_U: TStaticText;
    trans100_quick_U: TStaticText;
    comp100_quick_S: TStaticText;
    trans100_quick_S: TStaticText;
    comp100_quick_R: TStaticText;
    trans100_quick_R: TStaticText;
    comp100_straight_U: TStaticText;
    trans100_straight_U: TStaticText;
    comp100_straight_S: TStaticText;
    trans100_straight_S: TStaticText;
    comp100_straight_R: TStaticText;
    trans100_straight_R: TStaticText;
    StaticText51: TStaticText;
    comp2000_bubble_U: TStaticText;
    trans2000_bubble_U: TStaticText;
    StaticText54: TStaticText;
    comp2000_bubble_S: TStaticText;
    trans2000_bubble_S: TStaticText;
    StaticText57: TStaticText;
    comp2000_bubble_R: TStaticText;
    trans2000_bubble_R: TStaticText;
    comp2000_quick_U: TStaticText;
    trans2000_quick_U: TStaticText;
    comp2000_quick_S: TStaticText;
    trans2000_quick_S: TStaticText;
    comp2000_quick_R: TStaticText;
    trans2000_quick_R: TStaticText;
    comp2000_straight_U: TStaticText;
    trans2000_straight_U: TStaticText;
    comp2000_straight_S: TStaticText;
    trans2000_straight_S: TStaticText;
    comp2000_straight_R: TStaticText;
    trans2000_straight_R: TStaticText;
    Image1: TImage;
    Label1: TLabel;
    Image2: TImage;
    Label2: TLabel;
    Image3: TImage;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    AmountCB: TComboBox;
    StartButton: TButton;
    procedure FormCreate(Sender: TObject);
    procedure StartButtonClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  a, AddArr: TArray;
  compare, transposition: integer;

implementation

{$R *.dfm}

procedure Drawing(var img: TImage);
var
  x0, y0: integer;
begin
  x0 := round(img.Width div 2);
  y0 := round(img.Height div 2);
  with img.Canvas do
  begin
    Rectangle(0, 0, img.Width, img.Height);
    MoveTo(x0, 0);
    LineTo(x0, img.Height);
  end;
end;

function bubble_sort(var arr: TArray): TArray;
var
  max, i, j, temp: integer;
begin
  compare := 0;
  transposition := 0;
  max := Length(arr) - 1;
  for j := 0 to max do
    for i := 0 to max - 1 do
    begin
      inc(compare);
      if arr[i] > arr[i + 1] then
      begin
        temp := arr[i];
        arr[i] := arr[i + 1];
        arr[i + 1] := temp;
        inc(transposition);
      end;
    end;
end;

procedure quick_sort(var arr: TArray; min, max: integer);
var
  temp, mid, supp, i, j: integer;
begin
  supp := arr[(max + min) div 2];
  inc(transposition);
  i := min;
  j := max;
  repeat
    while arr[i] < supp do
    begin
      inc(compare);
      inc(i);
    end;
    while arr[j] > supp do
    begin
      dec(j);
      inc(compare);
    end;
    if i <= j then
    begin
      inc(compare);
      inc(transposition);
      temp := arr[i];
      arr[i] := arr[j];
      arr[j] := temp;
      inc(i);
      dec(j);
    end;
  until i > j;
  if min < j then
  begin
    quick_sort(arr, min, j);
  end;
  if i < max then
  begin
    quick_sort(arr, i, max);
  end;
end;

procedure selection(arr: TArray);
var
  i, j, MinInd, x: integer;
begin
  compare := 0;
  transposition := 0;
  for i := 0 to Length(arr) - 1 do
  begin
    MinInd := i;
    x := arr[i];
    for j := i + 1 to Length(arr) do
    begin
      inc(compare);
      if arr[j] < x then
      begin
        MinInd := j;
        x := arr[MinInd];
      end;
    end;
    inc(transposition);
    arr[MinInd] := arr[i];
    arr[i] := x;
  end;

end;

procedure reverse_array(arr: TArray);
var
  i, temp, max: integer;
begin
  max := Length(arr) - 1;
  for i := 0 to Length(arr) div 2 do
  begin
    temp := arr[i];
    arr[i] := arr[max - i];
    arr[max - i] := temp;
  end;
  Reversed := arr;
end;

procedure generate_mas(Amount: integer; out arr: TArray; var Form1: TForm1);
var
  i: integer;
begin
  randomize;
  SetLength(arr, Amount);
  for i := 0 to Amount - 1 do
  begin
    arr[i] := random(Amount * 10);
  end;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
  Drawing(Image1);
  Drawing(Image2);
  Drawing(Image3);
  // bubble(Form1);
  // quick(Form1);
  // straight_selection(Form1);
end;

procedure TForm1.StartButtonClick(Sender: TObject);
begin
  case AmountCB.ItemIndex of
    0:
      begin
        generate_mas(10, a, Form1); // Генерим массив
        bubble_sort(a); // сортируем его
        Form1.comp10_bubble_U.Caption := IntToStr(compare);
        Form1.trans10_bubble_U.Caption := IntToStr(transposition);
        Image1.Canvas.Pen.Color := clGreen;
        Image1.Canvas.Rectangle(5,round(transposition)+60,50,Image1.Height);
        bubble_sort(a); // сортируем отсортированный
        Form1.comp10_bubble_S.Caption := IntToStr(compare);
        Form1.trans10_bubble_S.Caption := IntToStr(transposition);
        reverse_array(a); // реверс сортированного
        bubble_sort(a); // сортируем реверснутый
        Form1.comp10_bubble_R.Caption := IntToStr(compare);
        Form1.trans10_bubble_R.Caption := IntToStr(transposition);

        compare := 0;
        transposition := 0;
        generate_mas(10, a, Form1); // Генерим массив
        quick_sort(a, 0, 9); // сортируем его
        Form1.comp10_quick_U.Caption := IntToStr(compare);
        Form1.trans10_quick_U.Caption := IntToStr(transposition);
        Image1.Canvas.Rectangle(55,round(transposition)+60,105,Image1.Height);        //шляпа
        compare := 0;
        transposition := 0;
        quick_sort(a, 0, 9); // сортируем отсортированный
        Form1.comp10_quick_S.Caption := IntToStr(compare);
        Form1.trans10_quick_S.Caption := IntToStr(transposition);
        reverse_array(a); // реверс сортированного
        compare := 0;
        transposition := 0;
        quick_sort(a, 0, 9); // сортируем реверснутый
        Form1.comp10_quick_R.Caption := IntToStr(compare);
        Form1.trans10_quick_R.Caption := IntToStr(transposition);

        generate_mas(10, a, Form1); // Генерим массив
        selection(a); // сортируем его
        Form1.comp10_straight_U.Caption := IntToStr(compare);
        Form1.trans10_straight_U.Caption := IntToStr(transposition);
        Image1.Canvas.Rectangle(105,round(transposition)+60,165,Image1.Height);       //шляпа
        selection(a); // сортируем отсортированный
        Form1.comp10_straight_S.Caption := IntToStr(compare);
        Form1.trans10_straight_S.Caption := IntToStr(transposition);
        reverse_array(a); // реверс сортированного
        selection(a); // сортируем реверснутый
        Form1.comp10_straight_R.Caption := IntToStr(compare);
        Form1.trans10_straight_R.Caption := IntToStr(transposition);
      end;

    1:
      begin
        generate_mas(100, a, Form1); // Генерим массив
        bubble_sort(a); // сортируем его
        Form1.comp100_bubble_U.Caption := IntToStr(compare);
        Form1.trans100_bubble_U.Caption := IntToStr(transposition);
        bubble_sort(a); // сортируем отсортированный
        Form1.comp100_bubble_S.Caption := IntToStr(compare);
        Form1.trans100_bubble_S.Caption := IntToStr(transposition);
        reverse_array(a); // реверс сортированного
        bubble_sort(a); // сортируем реверснутый
        Form1.comp100_bubble_R.Caption := IntToStr(compare);
        Form1.trans100_bubble_R.Caption := IntToStr(transposition);

        generate_mas(100, a, Form1); // Генерим массив
        compare := 0;
        transposition := 0;
        quick_sort(a, 0, 99); // сортируем его
        Form1.comp100_quick_U.Caption := IntToStr(compare);
        Form1.trans100_quick_U.Caption := IntToStr(transposition);
        compare := 0;
        transposition := 0;
        quick_sort(a, 0, 99); // сортируем отсортированный
        Form1.comp100_quick_S.Caption := IntToStr(compare);
        Form1.trans100_quick_S.Caption := IntToStr(transposition);
        reverse_array(a); // реверс сортированного
        compare := 0;
        transposition := 0;
        quick_sort(a, 0, 99); // сортируем реверснутый
        Form1.comp100_quick_R.Caption := IntToStr(compare);
        Form1.trans100_quick_R.Caption := IntToStr(transposition);

        generate_mas(100, a, Form1); // Генерим массив
        selection(a); // сортируем его
        Form1.comp100_straight_U.Caption := IntToStr(compare);
        Form1.trans100_straight_U.Caption := IntToStr(transposition);
        selection(a); // сортируем отсортированный
        Form1.comp100_straight_S.Caption := IntToStr(compare);
        Form1.trans100_straight_S.Caption := IntToStr(transposition);
        reverse_array(a); // реверс сортированного
        selection(a); // сортируем реверснутый
        Form1.comp100_straight_R.Caption := IntToStr(compare);
        Form1.trans100_straight_R.Caption := IntToStr(transposition);
      end;

    2:
      begin
        generate_mas(2000, a, Form1); // Генерим массив
        bubble_sort(a); // сортируем его
        Form1.comp2000_bubble_U.Caption := IntToStr(compare);
        Form1.trans2000_bubble_U.Caption := IntToStr(transposition);
        bubble_sort(a); // сортируем отсортированный
        Form1.comp2000_bubble_S.Caption := IntToStr(compare);
        Form1.trans2000_bubble_S.Caption := IntToStr(transposition);
        reverse_array(a); // реверс сортированного
        bubble_sort(a); // сортируем реверснутый
        Form1.comp2000_bubble_R.Caption := IntToStr(compare);
        Form1.trans2000_bubble_R.Caption := IntToStr(transposition);

        generate_mas(2000, a, Form1); // Генерим массив
        compare := 0;
        transposition := 0;
        quick_sort(a, 0, 1999); // сортируем его
        Form1.comp2000_quick_U.Caption := IntToStr(compare);
        Form1.trans2000_quick_U.Caption := IntToStr(transposition);
        compare := 0;
        transposition := 0;
        quick_sort(a, 0, 1999); // сортируем отсортированный
        Form1.comp2000_quick_S.Caption := IntToStr(compare);
        Form1.trans2000_quick_S.Caption := IntToStr(transposition);
        reverse_array(a); // реверс сортированного
        compare := 0;
        transposition := 0;
        quick_sort(a, 0, 1999); // сортируем реверснутый
        Form1.comp2000_quick_R.Caption := IntToStr(compare);
        Form1.trans2000_quick_R.Caption := IntToStr(transposition);

        generate_mas(2000, a, Form1); // Генерим массив
        selection(a); // сортируем его
        Form1.comp2000_straight_U.Caption := IntToStr(compare);
        Form1.trans2000_straight_U.Caption := IntToStr(transposition);
        selection(a); // сортируем отсортированный
        Form1.comp2000_straight_S.Caption := IntToStr(compare);
        Form1.trans2000_straight_S.Caption := IntToStr(transposition);
        reverse_array(a); // реверс сортированного
        selection(a); // сортируем реверснутый
        Form1.comp2000_straight_R.Caption := IntToStr(compare);
        Form1.trans2000_straight_R.Caption := IntToStr(transposition);
      end;
  end;
end;

end.
